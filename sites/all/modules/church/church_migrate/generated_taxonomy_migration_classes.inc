<?php
# Generated by church-tools/admin.sh, one class per vocabulary
# See https://www.drupal.org/node/1659838
class ChurchClassTypeMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);
   $vid = 2;
   $vmname = "ClassType";
   $query = Database::getConnection('default', 'for_migration')
          ->select('term_data', 'td')
          ->fields('td', array('tid', 'vid', 'name', 'description', 'weight'))
          ->condition('td.vid', $vid, '=');
   # Mark nonjoinable, since we expect source to be remote
   $this->source = new MigrateSourceSQL($query, array(), NULL, array('map_joinable' => FALSE));
   $this->destination = new MigrateDestinationTerm($vmname);
   $this->map = new MigrateSQLMap($this->machineName,
        array(
          'tid' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'description' => 'Drupal 6 term ID',
            'alias' => 'td',
          )
        ),
        MigrateDestinationTerm::getKeySchema(),
          'for_migration'
   );
   $this->addFieldMapping('name', 'name');
   $this->addFieldMapping('description', 'description');
  }
}
# Generated by church-tools/admin.sh, one class per vocabulary
# See https://www.drupal.org/node/1659838
class ChurchEventTypeMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);
   $vid = 3;
   $vmname = "EventType";
   $query = Database::getConnection('default', 'for_migration')
          ->select('term_data', 'td')
          ->fields('td', array('tid', 'vid', 'name', 'description', 'weight'))
          ->condition('td.vid', $vid, '=');
   # Mark nonjoinable, since we expect source to be remote
   $this->source = new MigrateSourceSQL($query, array(), NULL, array('map_joinable' => FALSE));
   $this->destination = new MigrateDestinationTerm($vmname);
   $this->map = new MigrateSQLMap($this->machineName,
        array(
          'tid' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'description' => 'Drupal 6 term ID',
            'alias' => 'td',
          )
        ),
        MigrateDestinationTerm::getKeySchema(),
          'for_migration'
   );
   $this->addFieldMapping('name', 'name');
   $this->addFieldMapping('description', 'description');
  }
}
# Generated by church-tools/admin.sh, one class per vocabulary
# See https://www.drupal.org/node/1659838
class ChurchAdTypeMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);
   $vid = 4;
   $vmname = "AdType";
   $query = Database::getConnection('default', 'for_migration')
          ->select('term_data', 'td')
          ->fields('td', array('tid', 'vid', 'name', 'description', 'weight'))
          ->condition('td.vid', $vid, '=');
   # Mark nonjoinable, since we expect source to be remote
   $this->source = new MigrateSourceSQL($query, array(), NULL, array('map_joinable' => FALSE));
   $this->destination = new MigrateDestinationTerm($vmname);
   $this->map = new MigrateSQLMap($this->machineName,
        array(
          'tid' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'description' => 'Drupal 6 term ID',
            'alias' => 'td',
          )
        ),
        MigrateDestinationTerm::getKeySchema(),
          'for_migration'
   );
   $this->addFieldMapping('name', 'name');
   $this->addFieldMapping('description', 'description');
  }
}
# Generated by church-tools/admin.sh, one class per vocabulary
# See https://www.drupal.org/node/1659838
class ChurchDepartmentMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);
   $vid = 5;
   $vmname = "Department";
   $query = Database::getConnection('default', 'for_migration')
          ->select('term_data', 'td')
          ->fields('td', array('tid', 'vid', 'name', 'description', 'weight'))
          ->condition('td.vid', $vid, '=');
   # Mark nonjoinable, since we expect source to be remote
   $this->source = new MigrateSourceSQL($query, array(), NULL, array('map_joinable' => FALSE));
   $this->destination = new MigrateDestinationTerm($vmname);
   $this->map = new MigrateSQLMap($this->machineName,
        array(
          'tid' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'description' => 'Drupal 6 term ID',
            'alias' => 'td',
          )
        ),
        MigrateDestinationTerm::getKeySchema(),
          'for_migration'
   );
   $this->addFieldMapping('name', 'name');
   $this->addFieldMapping('description', 'description');
  }
}
# Generated by church-tools/admin.sh, one class per vocabulary
# See https://www.drupal.org/node/1659838
class ChurchNewsletterMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);
   $vid = 6;
   $vmname = "Newsletter";
   $query = Database::getConnection('default', 'for_migration')
          ->select('term_data', 'td')
          ->fields('td', array('tid', 'vid', 'name', 'description', 'weight'))
          ->condition('td.vid', $vid, '=');
   # Mark nonjoinable, since we expect source to be remote
   $this->source = new MigrateSourceSQL($query, array(), NULL, array('map_joinable' => FALSE));
   $this->destination = new MigrateDestinationTerm($vmname);
   $this->map = new MigrateSQLMap($this->machineName,
        array(
          'tid' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'description' => 'Drupal 6 term ID',
            'alias' => 'td',
          )
        ),
        MigrateDestinationTerm::getKeySchema(),
          'for_migration'
   );
   $this->addFieldMapping('name', 'name');
   $this->addFieldMapping('description', 'description');
  }
}
# Generated by church-tools/admin.sh, one class per vocabulary
# See https://www.drupal.org/node/1659838
class ChurchGroupTypeMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);
   $vid = 7;
   $vmname = "GroupType";
   $query = Database::getConnection('default', 'for_migration')
          ->select('term_data', 'td')
          ->fields('td', array('tid', 'vid', 'name', 'description', 'weight'))
          ->condition('td.vid', $vid, '=');
   # Mark nonjoinable, since we expect source to be remote
   $this->source = new MigrateSourceSQL($query, array(), NULL, array('map_joinable' => FALSE));
   $this->destination = new MigrateDestinationTerm($vmname);
   $this->map = new MigrateSQLMap($this->machineName,
        array(
          'tid' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'description' => 'Drupal 6 term ID',
            'alias' => 'td',
          )
        ),
        MigrateDestinationTerm::getKeySchema(),
          'for_migration'
   );
   $this->addFieldMapping('name', 'name');
   $this->addFieldMapping('description', 'description');
  }
}
# Generated by church-tools/admin.sh, one class per vocabulary
# See https://www.drupal.org/node/1659838
class ChurchVolunteerTaskTypeMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);
   $vid = 8;
   $vmname = "VolunteerTaskType";
   $query = Database::getConnection('default', 'for_migration')
          ->select('term_data', 'td')
          ->fields('td', array('tid', 'vid', 'name', 'description', 'weight'))
          ->condition('td.vid', $vid, '=');
   # Mark nonjoinable, since we expect source to be remote
   $this->source = new MigrateSourceSQL($query, array(), NULL, array('map_joinable' => FALSE));
   $this->destination = new MigrateDestinationTerm($vmname);
   $this->map = new MigrateSQLMap($this->machineName,
        array(
          'tid' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'description' => 'Drupal 6 term ID',
            'alias' => 'td',
          )
        ),
        MigrateDestinationTerm::getKeySchema(),
          'for_migration'
   );
   $this->addFieldMapping('name', 'name');
   $this->addFieldMapping('description', 'description');
  }
}
# Generated by church-tools/admin.sh, one class per vocabulary
# See https://www.drupal.org/node/1659838
class ChurchPolicyTypeMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);
   $vid = 9;
   $vmname = "PolicyType";
   $query = Database::getConnection('default', 'for_migration')
          ->select('term_data', 'td')
          ->fields('td', array('tid', 'vid', 'name', 'description', 'weight'))
          ->condition('td.vid', $vid, '=');
   # Mark nonjoinable, since we expect source to be remote
   $this->source = new MigrateSourceSQL($query, array(), NULL, array('map_joinable' => FALSE));
   $this->destination = new MigrateDestinationTerm($vmname);
   $this->map = new MigrateSQLMap($this->machineName,
        array(
          'tid' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'description' => 'Drupal 6 term ID',
            'alias' => 'td',
          )
        ),
        MigrateDestinationTerm::getKeySchema(),
          'for_migration'
   );
   $this->addFieldMapping('name', 'name');
   $this->addFieldMapping('description', 'description');
  }
}
# Generated by church-tools/admin.sh, one class per vocabulary
# See https://www.drupal.org/node/1659838
class ChurchLinkTypeMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);
   $vid = 10;
   $vmname = "LinkType";
   $query = Database::getConnection('default', 'for_migration')
          ->select('term_data', 'td')
          ->fields('td', array('tid', 'vid', 'name', 'description', 'weight'))
          ->condition('td.vid', $vid, '=');
   # Mark nonjoinable, since we expect source to be remote
   $this->source = new MigrateSourceSQL($query, array(), NULL, array('map_joinable' => FALSE));
   $this->destination = new MigrateDestinationTerm($vmname);
   $this->map = new MigrateSQLMap($this->machineName,
        array(
          'tid' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'description' => 'Drupal 6 term ID',
            'alias' => 'td',
          )
        ),
        MigrateDestinationTerm::getKeySchema(),
          'for_migration'
   );
   $this->addFieldMapping('name', 'name');
   $this->addFieldMapping('description', 'description');
  }
}
# Generated by church-tools/admin.sh, one class per vocabulary
# See https://www.drupal.org/node/1659838
class ChurchBlogCategoryMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);
   $vid = 11;
   $vmname = "BlogCategory";
   $query = Database::getConnection('default', 'for_migration')
          ->select('term_data', 'td')
          ->fields('td', array('tid', 'vid', 'name', 'description', 'weight'))
          ->condition('td.vid', $vid, '=');
   # Mark nonjoinable, since we expect source to be remote
   $this->source = new MigrateSourceSQL($query, array(), NULL, array('map_joinable' => FALSE));
   $this->destination = new MigrateDestinationTerm($vmname);
   $this->map = new MigrateSQLMap($this->machineName,
        array(
          'tid' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'description' => 'Drupal 6 term ID',
            'alias' => 'td',
          )
        ),
        MigrateDestinationTerm::getKeySchema(),
          'for_migration'
   );
   $this->addFieldMapping('name', 'name');
   $this->addFieldMapping('description', 'description');
  }
}
# Generated by church-tools/admin.sh, one class per vocabulary
# See https://www.drupal.org/node/1659838
class ChurchGradeAgeRangeMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);
   $vid = 12;
   $vmname = "GradeAgeRange";
   $query = Database::getConnection('default', 'for_migration')
          ->select('term_data', 'td')
          ->fields('td', array('tid', 'vid', 'name', 'description', 'weight'))
          ->condition('td.vid', $vid, '=');
   # Mark nonjoinable, since we expect source to be remote
   $this->source = new MigrateSourceSQL($query, array(), NULL, array('map_joinable' => FALSE));
   $this->destination = new MigrateDestinationTerm($vmname);
   $this->map = new MigrateSQLMap($this->machineName,
        array(
          'tid' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'description' => 'Drupal 6 term ID',
            'alias' => 'td',
          )
        ),
        MigrateDestinationTerm::getKeySchema(),
          'for_migration'
   );
   $this->addFieldMapping('name', 'name');
   $this->addFieldMapping('description', 'description');
  }
}
# Generated by church-tools/admin.sh, one class per vocabulary
# See https://www.drupal.org/node/1659838
class ChurchTagsMigration extends Migration {
  public function __construct($arguments) {
    parent::__construct($arguments);
   $vid = 13;
   $vmname = "Tags";
   $query = Database::getConnection('default', 'for_migration')
          ->select('term_data', 'td')
          ->fields('td', array('tid', 'vid', 'name', 'description', 'weight'))
          ->condition('td.vid', $vid, '=');
   # Mark nonjoinable, since we expect source to be remote
   $this->source = new MigrateSourceSQL($query, array(), NULL, array('map_joinable' => FALSE));
   $this->destination = new MigrateDestinationTerm($vmname);
   $this->map = new MigrateSQLMap($this->machineName,
        array(
          'tid' => array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'description' => 'Drupal 6 term ID',
            'alias' => 'td',
          )
        ),
        MigrateDestinationTerm::getKeySchema(),
          'for_migration'
   );
   $this->addFieldMapping('name', 'name');
   $this->addFieldMapping('description', 'description');
  }
}
?>
